package com.sina.weatherjava.ui.activity;

import static com.sina.weatherjava.utils.LocationUtils.arePermissions;

import android.Manifest;
import android.annotation.SuppressLint;
import android.content.Context;
import android.content.IntentSender;
import android.content.pm.PackageManager;
import android.location.Location;
import android.os.Bundle;
import android.os.Looper;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.TextView;

import androidx.activity.result.ActivityResultLauncher;
import androidx.activity.result.contract.ActivityResultContracts;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.core.app.ActivityCompat;
import androidx.fragment.app.Fragment;
import androidx.lifecycle.ViewModelProvider;

import com.google.android.gms.common.api.ResolvableApiException;
import com.google.android.gms.location.FusedLocationProviderClient;
import com.google.android.gms.location.LocationAvailability;
import com.google.android.gms.location.LocationCallback;
import com.google.android.gms.location.LocationRequest;
import com.google.android.gms.location.LocationResult;
import com.google.android.gms.location.LocationServices;
import com.google.android.gms.location.LocationSettingsRequest;
import com.google.android.gms.location.LocationSettingsResponse;
import com.google.android.gms.location.SettingsClient;
import com.google.android.gms.tasks.Task;
import com.google.android.material.floatingactionbutton.FloatingActionButton;
import com.sina.weatherjava.R;

import dagger.hilt.android.AndroidEntryPoint;

@AndroidEntryPoint
public class WeatherFragment extends Fragment {

    private FloatingActionButton floatingActionButton;
    private TextView tvLocation, tvLastLocation, tvUpdateLocation;
    private WeatherViewModel weatherViewModel;
    private ActivityResultLauncher<String[]> locationPermissionRequest;
    private FusedLocationProviderClient fusedLocationProviderClient;
    private LocationRequest locationRequest;
    private LocationCallback locationCallback;

    @Override
    public void onAttach(@NonNull Context context) {
        super.onAttach(context);
        locationPermissionRequest = registerForActivityResult(new ActivityResultContracts
                .RequestMultiplePermissions(), result -> {
            if (Boolean.TRUE.equals(result.get(Manifest.permission.ACCESS_COARSE_LOCATION))) ;
            getCurrentLocation();
        });
    }

    @Override
    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
        return inflater.inflate(R.layout.fragment_weather, container, false);
    }

    public static WeatherFragment newInstance() {
        return new WeatherFragment();
    }

    @Override
    public void onViewCreated(@NonNull View view, @Nullable Bundle savedInstanceState) {
        super.onViewCreated(view, savedInstanceState);
        /**
         * first way
         */
        getCurrentLocation();
        implViewModel();
        /**
         * second way
         */
        getCurrentLocationInterval();

        implLocationCallback();
        initViews(view);
        observers();
    }

    private void implViewModel() {
        weatherViewModel = new ViewModelProvider(this).get(WeatherViewModel.class);
    }

    private void implLocationCallback() {
        locationCallback = new LocationCallback() {
            @Override
            public void onLocationAvailability(@NonNull LocationAvailability locationAvailability) {
                Log.d("TAG", "locationAvailability is " + locationAvailability.isLocationAvailable());
                super.onLocationAvailability(locationAvailability);
            }

            @Override
            public void onLocationResult(@NonNull LocationResult locationResult) {
                Log.d("TAG", "received " + locationResult.getLocations().size() + " locations");
                for (Location loc : locationResult.getLocations()) {
                    tvLocation.append("\n" + loc.getProvider() + ":Accu:(" + loc.getAccuracy() + "). Lat:" + loc.getLatitude() + ",Lon:" + loc.getLongitude());
                }
            }
        };
    }

    @SuppressLint("MissingPermission")
    private void getCurrentLocation() {
        fusedLocationProviderClient = LocationServices.getFusedLocationProviderClient(requireActivity());
        fusedLocationProviderClient.getLastLocation().addOnSuccessListener(location -> {
            if (location != null) {
                String loc = location.getProvider() + ":Accu:(" + location.getAccuracy() + "). Lat:" + location.getLatitude() + ",Lon:" + location.getLongitude();
                tvLastLocation.setText(loc);
                weatherViewModel.getWeatherData(location.getLatitude(), location.getLongitude());
            }
        });
        createLocRequest();
        LocationSettingsRequest.Builder builder = new LocationSettingsRequest.Builder().addLocationRequest(locationRequest);
        SettingsClient client = LocationServices.getSettingsClient(requireActivity());
        Task<LocationSettingsResponse> task = client.checkLocationSettings(builder.build());
        task.addOnFailureListener(e -> {
            if (e instanceof ResolvableApiException) {
                try {
                    ResolvableApiException resolvable = (ResolvableApiException) e;
                    resolvable.startResolutionForResult(requireActivity(), 500);
                } catch (IntentSender.SendIntentException sendEx) {
                }
            }
        });
    }

    protected void createLocRequest() {
        locationRequest = new LocationRequest();
        locationRequest.setInterval(10000);
        locationRequest.setFastestInterval(5000);
        locationRequest.setPriority(LocationRequest.PRIORITY_HIGH_ACCURACY);
    }

    private void observers() {
        weatherViewModel.getLiveDataRequestPermissions().observe(getViewLifecycleOwner(), result -> {
            if (result) {
                requestPermissions();
                weatherViewModel.resetPermissions();
                getCurrentLocation();
            }
        });

        weatherViewModel.getWeatherResponse().observe(getViewLifecycleOwner(), weatherResponse -> {
            tvLocation.setText(String.valueOf(weatherResponse.getMain().getTemp()));
        });
    }

    private void initViews(View view) {
        floatingActionButton = view.findViewById(R.id.floatingActionButton);
        tvLocation = view.findViewById(R.id.tvLocation);
        tvLastLocation = view.findViewById(R.id.tvLastLocation);
        tvUpdateLocation = view.findViewById(R.id.tvUpdateLocation);
        floatingActionButton.setOnClickListener(view1 -> {
            getCurrentLocation();
        });
    }


    /**
     * second way to get current location
     */
    private void getCurrentLocationInterval() {
        LocationRequest locationRequest = LocationRequest.create();
        locationRequest.setPriority(LocationRequest.PRIORITY_HIGH_ACCURACY);
        locationRequest.setInterval(10000);
        if (ActivityCompat.checkSelfPermission(requireContext(), Manifest.permission.ACCESS_FINE_LOCATION)
                != PackageManager.PERMISSION_GRANTED && ActivityCompat.checkSelfPermission(requireContext(),
                Manifest.permission.ACCESS_COARSE_LOCATION) != PackageManager.PERMISSION_GRANTED) {
            return;
        }
        fusedLocationProviderClient.requestLocationUpdates(locationRequest, new LocationCallback() {
            @Override
            public void onLocationResult(LocationResult locationResult) {
                if (locationResult != null) {
                    Location location = locationResult.getLastLocation();
                    if (location != null) {
                        double latitude = location.getLatitude();
                        double longitude = location.getLongitude();
                        tvUpdateLocation.append("\n"  + ":Interval: Lat:" + latitude + ",Lon:" +longitude);

                        Log.e("TAG", "onLocationResult: " + latitude + " " + longitude);
                    }
                }
            }
        }, Looper.getMainLooper());
    }

    private void requestPermissions() {
        if (!arePermissions(requireContext())) {
            locationPermissionRequest.launch(new String[]{
                    Manifest.permission.ACCESS_FINE_LOCATION,
                    Manifest.permission.ACCESS_COARSE_LOCATION
            });
        }
    }
}
